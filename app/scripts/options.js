var options = {
    caseSensitive:{
        default: false,
        description: "Treat attributes in case sensitive manner (useful for custom HTML tags)"
    },
    collapseBooleanAttributes: {
        default: false,
        description: "Omit attribute values from boolean attributes"
    },
    collapseInlineTagWhitespace: {
        default: false,
        description: "Don't leave any spaces between display:inline; elements when collapsing. Must be used in conjunction with collapseWhitespace=true"
    },
    collapseWhitespace: {
        default: true,
        description: "Collapse white space that contributes to text nodes in a document tree"
    },
    conservativeCollapse: {
        default: false,
        description: "Always collapse to 1 space (never remove it entirely). Must be used in conjunction with collapseWhitespace=true"
    },
    continueOnParseError: {
        default: false,
        description: "Handle parse errors instead of aborting."
    },
    decodeEntities: {
        default: false,
        description: "Use direct Unicode characters whenever possible"
    },
    html5: {
        default: false,
        description: "Parse input according to HTML5 specifications"
    },
    includeAutoGeneratedTags: {
        default: false,
        description: "Insert tags generated by HTML parser"
    },
    keepClosingSlash: {
        default: false,
        description: "Keep the trailing slash on singleton elements"
    },
    maxLineLength: {
        default: false,
        description: "Specify a maximum line length. Compressed output will be split by newlines at valid HTML split-points"
    },
    minifyCSS: {
        default: true,
        description: "Minify CSS in style elements and style attributes (uses clean-css)"
    },
    minifyJS: {
        default: true,
        description: "Minify JavaScript in script elements and event attributes (uses UglifyJS)"
    },
    preserveLineBreaks: {
        default: true,
        description: "Always collapse to 1 line break (never remove it entirely) when whitespace between tags include a line break. Must be used in conjunction with collapseWhitespace=true"
    },
    preventAttributesEscaping: {
        default: false,
        description: "Prevents the escaping of the values of attributes"
    },
    processConditionalComments: {
        default: true,
        description: "Process contents of conditional comments through minifier"
    },
    quoteCharacter: {
        default: false,
        description: "Type of quote to use for attribute values (' or \")"
    },
    removeAttributeQuotes: {
        default: false,
        description: "Remove quotes around attributes when possible"
    },
    removeComments: {
        default: true,
        description: "Strip HTML comments"
    },
    removeEmptyAttributes: {
        default: false,
        description: "Remove all attributes with whitespace-only values"
    },
    removeEmptyElements: {
        default: false,
        description: "Remove all elements with empty contents"
    },
    removeOptionalTags: {
        default: false,
        description: "Remove optional tags"
    },
    removeScriptTypeAttributes: {
        default: false,
        description: "Remove type=\"text/javascript\" from script tags. Other type attribute values are left intact"
    },
    removeStyleLinkTypeAttributes: {
        default: false,
        description: "Remove type=\"text/css\" from style and link tags. Other type attribute values are left intact"
    },
    removeTagWhitespace: {
        default: false,
        description: "Remove space between attributes whenever possible. Note that this will result in invalid HTML!"
    },
    sortAttributes: {
        default: false,
        description: "Sort attributes by frequency"
    },
    sortClassName: {
        default: false,
        description: "Sort style classes by frequency"
    },
    trimCustomFragments: {
        default: false,
        description: "Trim white space around ignoreCustomFragments."
    },
    useShortDoctype: {
        default: false,
        description: "Replaces the doctype with the short (HTML5) doctype"
    }
};

function save_options() {
    var opts = {}
    for (var label of Object.keys(options)) {
        opts[label] = document.getElementById(label).checked;
    }
    var browser = browser || chrome;
    browser.storage.sync.set(opts, function() {
        var status = document.getElementById('status');
        status.textContent = 'Options saved.';
        setTimeout(function() {
            status.textContent = '';
        }, 750);
    });
}

function restore_options() {
    var defaults = {};
    for (var label of Object.keys(options)) {
        defaults[label] = options[label].default;
    }
    var browser = browser || chrome;
    browser.storage.sync.get(defaults, function(items) {
        var div = document.getElementById('options');
        for (var label of Object.keys(options)) {
            var input = document.createElement("input");
            input.type = "checkbox";
            input.id = label
            input.checked = items[label];
            div.appendChild(input);
            var elem = document.createElement("label");
            elem.innerHTML = "<b>"+label+"</b>";
            div.appendChild(elem);
            div.appendChild(document.createElement("br"));
            var span = document.createElement("span");
            span.innerHTML = options[label].description;
            div.appendChild(span);
            var hr = document.createElement("hr");
            div.appendChild(hr);
        }
    });
}

document.addEventListener('DOMContentLoaded', restore_options);
document.getElementById('save').addEventListener('click', save_options);